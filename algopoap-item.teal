#pragma version 6
// AlgoPoaP
// algopoap.algo
// Website: https://algopoap.com
// dApp: https://algopoap.xyz
// Authors: @emg110.algo, @sheghzo.algo
// Github: https://github.com/algopoap

// AlgoPoaP Item Smart Contract

// Scratch space schema
// 0: Newly Created AlgoPoaP ASA ID

// Local state schema for algopoap author
//TODO local states...

// Local state schema for algopoap attendee
//TODO local states...

// Global state schema
//Uint64 poap_item_onboard_count
//Uint64 poap_item_txn_count
//Uint64 poap_item_apply_count
//Uint64 poap_item_issuance_count
//Uint64 poap_item_nft_issuance_count
//Uint64 poap_item_txn_issuance_count
//Uint64 poap_item_geo_check_count
//Uint64 poap_item_qr_check_count
//Uint64 poap_item_sig_check_count
//Uint64 poap_item_attendee_count
//Byte poap_item_last_attendee
//Byte poap_item_last_apply
//Byte poap_item_last_issuance
//Byte poap_item_last_nft_issuance
//Byte poap_item_last_txn_issuance

//Uint64 poap_lat_1
//Uint64 poap_lat_2
//Uint64 poap_lng_1
//Uint64 poap_lng_2
//Uint64 poap_geo_buffer
//Uint64 poap_start_timestamp
//Uint64 poap_end_timestamp
//Byte poap_name
//Byte poap_logo
//Byte poap_desc
//Byte poap_address
//Byte poap_url
//Byte poap_email
//Byte poap_company_name
//Byte poap_company_logo
//Byte poap_has_nft
//Byte poap_has_geo
//Byte poap_has_sig
//Byte poap_has_qrcode


//Uint64 poap_parent_id
//Byte poap_parent_address
//Byte poap_author_address
//Uint64 poap_asa_id

//Starts immidiately by a root main branch
b b_main
//Main ruter branch which checks the call and routes to designated branch
b_main:
txn NumAppArgs
int 0
==
bz b_method_check

// Checking Application ID to be zero (app in creation)
txn ApplicationID
bz b_creation

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
bnz b_deletion

// Checking onCompletion type for update application call
txn OnCompletion
int UpdateApplication
==
bnz b_update

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
bnz b_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz b_optin

// Checking onCompletion type for noop application call
txn OnCompletion
int NoOp
==
bnz b_error

//If non of method checks matched then error and reject (to have no arg , noop calls diverted to error most seems to be a good practice to dedicate noop calls to method calls)
b b_error


b_method_check:

// Checking application call's Arg 0 for activate method signature
method "setup(appl,pay,uint16,uint48,uint24,uint48,uint24,uint64,uint64,string,string,string,string,string,bool,bool,bool,bool)string"
txn ApplicationArgs 0
==
bnz method_activate


// Checking application call's Arg 0 for activate method signature
method "activate(appl,pay,axfer)uint64"
txn ApplicationArgs 0
==
bnz method_activate

// Checking application call's Arg 0 for release method signature
method "release(appl)bool"
txn ApplicationArgs 0
==
bnz method_release

// Checking application call's Arg 0 for claim method signature
method "claim(appl,pay,axfer,account,uint16,uint48,uint24,uint48,uint24,uint64,string)bool"
txn ApplicationArgs 0
==
bnz method_claim

// Checking application call's Arg 0 for get_metric method signature
method "get_metric(string)string"
txn ApplicationArgs 0
==
bnz method_get_metric

// Checking application call's Arg 0 for get_metrics method signature
method "get_metrics()string[]"
txn ApplicationArgs 0
==
bnz method_get_metrics

//If non of method checks matched then error and reject
b b_error

//Checks the Sender to be the Creator (AlgoPoaP Author)
sub_check_author:
txn Sender
global CreatorAddress
==
assert
retsub

// Handles creating a new item AlgoPoaP smart contract
b_creation:
byte 0x151f7c7580
byte "algopoap:item:create:"
concat
txn Sender
concat
b b_log_return

// Handles opting into (onboarding) an item AlgoPoaP smart contract
b_optin:
//TODO: Increment counters and update global states
byte "algopoap:item:optin:"
txn Sender
concat
b b_log_return

// Handles deletion of an item AlgoPoaP smart contract
b_deletion:
callsub sub_check_author
byte 0x151f7c7580
byte "algopoap:item:delete:"
concat
global CurrentApplicationID
itob
concat
b b_log_return



// Handles update of an item AlgoPoaP smart contract
b_update:
callsub sub_check_author
byte 0x151f7c7580
byte "algopoap:update:"
concat
global CurrentApplicationID
itob
concat
b b_log_return


// Handles close out (offboarding) from an item AlgoPoaP smart contract
b_closeout:
byte "algopoap:closeout:"
txn Sender
concat
b b_log_return

//Handles NoOp calls and rejects them all (those with args are already routed)
b_noop:
b b_error


// Handles creation of AlgoPoaP NFT during setup
sub_create_nft:
itxn_begin
int acfg
itxn_field TypeEnum
int 1000
itxn_field ConfigAssetTotal
int 0
itxn_field ConfigAssetDecimals
byte "PoaP"
itxn_field ConfigAssetUnitName
byte "AlgoPoaP"
itxn_field ConfigAssetName
byte "https://algopoap.xyz/"
itxn_field ConfigAssetURL
global CurrentApplicationAddress
dup
dup2
itxn_field ConfigAssetManager
itxn_field ConfigAssetReserve
itxn_field ConfigAssetFreeze
itxn_field ConfigAssetClawback
itxn_submit
byte "poap_asa_id"
itxn CreatedAssetID
dup
store 0
app_global_put
retsub 

// Handles config of AlgoPoaP NFT during setup
b_config_nft:
itxn_begin
itxn_field ConfigAsset
int acfg
itxn_field TypeEnum
txn Sender
itxn_field ConfigAssetFreeze
txn Sender
itxn_field ConfigAssetClawback
global CurrentApplicationAddress
dup
itxn_field ConfigAssetManager
itxn_field ConfigAssetReserve

itxn_submit


// Handles setting up global states and creation of AlgoPoaP NFT
method_setup:

// Global states metrics setup
byte "poap_item_onboard_count"
int 0
app_global_put

byte "poap_item_txn_count"
int 0
app_global_put

byte "poap_item_apply_count"
int 0
app_global_put

byte "poap_item_issuance_count"
int 0
app_global_put

byte "poap_item_nft_issuance_count"
int 0
app_global_put

byte "poap_item_txn_issuance_count"
int 0
app_global_put

byte "poap_item_geo_check_count"
int 0
app_global_put

byte "poap_item_qr_check_count"
int 0
app_global_put

byte "poap_item_sig_check_count"
int 0
app_global_put

byte "poap_item_attendee_count"
int 0
app_global_put

byte "poap_item_last_attendee"
byte ""
app_global_put

byte "poap_item_last_apply"
byte ""
app_global_put

byte "poap_item_last_issuance"
byte ""
app_global_put

byte "poap_item_last_nft_issuance"
byte ""
app_global_put

byte "poap_item_last_txn_issuance"
byte ""
app_global_put

// Args to Global states PoaP data
// setup(pay,account,application,uint16,uint48,uint24,uint48,uint24,uint64,uint64,string,string,string,string,string,string,string,string,bool,bool,bool,bool)byte[]

byte "poap_lat_1"
txn ApplicationArgs 1
app_global_put

byte "poap_lat_2"
txn ApplicationArgs 2
app_global_put

byte "poap_lng_1"
txn ApplicationArgs 3
app_global_put

byte "poap_lng_2"
txn ApplicationArgs 4
app_global_put

byte "poap_geo_buffer"
txn ApplicationArgs 5
app_global_put

byte "poap_start_timestamp"
txn ApplicationArgs 6
app_global_put

byte "poap_end_timestamp"
txn ApplicationArgs 7
app_global_put

byte "poap_name"
txn ApplicationArgs 8
app_global_put

byte "poap_logo"
txn ApplicationArgs 9
app_global_put

byte "poap_desc"
txn ApplicationArgs 10
app_global_put

byte "poap_address"
txn ApplicationArgs 11
app_global_put

byte "poap_url"
txn ApplicationArgs 12
app_global_put

byte "poap_email"
txn ApplicationArgs 13
app_global_put

byte "poap_company_name"
txn ApplicationArgs 14
app_global_put

byte "poap_company_logo"
txn ApplicationArgs 16
app_global_put

byte "poap_has_nft"
txn ApplicationArgs 17
app_global_put

byte "poap_has_geo"
txn ApplicationArgs 18
app_global_put

byte "poap_has_sig"
txn ApplicationArgs 19
app_global_put

byte "poap_has_qrcode"
txn ApplicationArgs 20
app_global_put

// ASA Existence check to route to creation or config branches and subs
int 0
byte "poap_asa_id"
app_global_get_ex
bnz b_config_nft
callsub sub_create_nft
byte 0x151f7c7580
load 0
concat
b b_log_return

// Handles activate method
method_activate:
b b_log_return

// Handles claim method
method_claim:
b b_log_return

// Handles release method
method_release:
b b_log_return

//Handles ABI method call for getting a single total metric of AlgoPoaP item
method_get_metric:
byte 0x151f7c7580
byte "single metric"
concat
b b_log_return

//Handles ABI method call for getting all total metrics of AlgoPoaP item
method_get_metrics:
byte 0x151f7c7580
byte "All metrics"
concat
b b_log_return

// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
b_log_return:
log
int 1
return

//Handles rejection with error
b_error:
err











