#pragma version 6
//   _______ __               ______               ______ 
//  |   _   |  |.-----.-----.|   __ \.-----.---.-.|   __ \
//  |       |  ||  _  |  _  ||    __/|  _  |  _  ||    __/
//  |___|___|__||___  |_____||___|   |_____|___._||___|   
//              |_____|                                   
// algopoap.algo
// Website: https://algopoap.com
// dApp: https://algopoap.xyz
// Authors: @emg110.algo, @sheghzo.algo
// Github: https://github.com/algopoap

// AlgoPoaP Item Smart Contract

// Scratch space schema
// 0: Newly Created AlgoPoaP ASA ID
// 1: ASA ID to use with NFT sender sub
// 2: ASA Sender address to use with NFT sender sub
// 3: ASA Receiver address to use with NFT sender sub
// 4: ASA Amount to use with NFT sender sub

// 5: latitude integer part (2 digits)
// 6: latitude decimal part as integer (6 digits)
// 7: longitude integer part (3 digits)
// 8: longitude decimal part as integer (6 digits)
// 9: timestamp of claim time
// 10: The secret Attendee will be presented with in QRCode form to scan during claim and send as string arg.
// 11: Author Address store
// 12: Arg 15 for extraction

// Local state schema for algopoap author
//TODO local states...

// Local state schema for algopoap attendee
//TODO local states...

// Global state schema
// Uint64 poap_parent_id
// Byte poap_parent_address
// Byte poap_author_address
// Uint64 poap_asa_id


// Uint64 poap_setup_time
// Uint64 poap_activate_time
// Uint64 poap_release_time

// Byte poap_is_activated
// Byte poap_is_setup
// Byte poap_is_released

// Uint64 poap_item_attendee_count
// Uint64 poap_item_claim_count
// Uint64 poap_item_issuance_count
// Uint64 poap_item_nft_issuance_count
// Uint64 poap_item_txn_issuance_count
// Uint64 poap_item_geo_check_count
// Uint64 poap_item_qr_check_count
// Uint64 poap_item_sig_check_count


// Byte poap_item_last_attendee
// Byte poap_item_last_issuance
// Byte poap_item_last_nft_issuance
// Byte poap_item_last_txn_issuance

// Uint64 poap_lat_1
// Uint64 poap_lat_2
// Uint64 poap_lng_1
// Uint64 poap_lng_2
// Uint64 poap_geo_buffer
// Uint64 poap_start_timestamp
// Uint64 poap_end_timestamp
// Byte poap_name
// Byte poap_logo
// Byte poap_desc
// Byte poap_address
// Byte poap_url
// Byte poap_email
// Byte poap_company_name
// Byte poap_company_logo
// Byte poap_has_nft
// Byte poap_has_geo
// Byte poap_has_sig
// Byte poap_has_qrcode

// Byte poap_qr_secret

//////////////////////////////////////////////////////////////

// Starts immidiately by a root main branch
b b_main
// Main router branch which checks the call and routes to designated branch
b_main:
txn NumAppArgs
int 0
==
bz b_method_check

// Checking Application ID to be zero (app in creation)
txn ApplicationID
bz b_creation

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
bnz b_deletion

// Checking onCompletion type for update application call
txn OnCompletion
int UpdateApplication
==
bnz b_update

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
bnz b_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz b_optin

// Checking onCompletion type for noop application call
txn OnCompletion
int NoOp
==
bnz b_error

// If non of method checks matched then error and reject (to have no arg , noop calls diverted to error most seems to be a good practice to dedicate noop calls to method calls)
b b_error


b_method_check:

// Checking application call's Arg 0 for activate method signature
method "setup(pay,address,application,string,string,string,string,string,string,string,string,string,uint64,uint64,string,string,uint64,uint64,uint8,uint8,uint8,uint8)string"
txn ApplicationArgs 0
==
bnz method_setup

// Checking application call's Arg 0 for activate method signature
method "re_setup(pay,address,application,asset,string,string,string,string,string,string,string,string,string,uint64,uint64,string,string,uint64,uint64,uint8,uint8,uint8,uint8)string"
txn ApplicationArgs 0
==
bnz method_setup

// Checking application call's Arg 0 for activate method signature
method "activate(pay,axfer,application)string"
txn ApplicationArgs 0
==
bnz method_activate

// Checking application call's Arg 0 for release method signature
method "release(appl)bool"
txn ApplicationArgs 0
==
bnz method_release

// Checking application call's Arg 0 for claim method signature
method "claim(appl,pay,axfer,account,uint16,uint48,uint24,uint48,uint24,uint64,string)bool"
txn ApplicationArgs 0
==
bnz method_claim

// Checking application call's Arg 0 for get_metric method signature
method "get_metric(string)string"
txn ApplicationArgs 0
==
bnz method_get_metric

// Checking application call's Arg 0 for get_metrics method signature
method "get_metrics()string[]"
txn ApplicationArgs 0
==
bnz method_get_metrics

// If non of method checks matched then error and reject
b b_error1

//Checks the Sender to be the Creator (AlgoPoaP Author)
sub_check_owner:
txn Sender
global CreatorAddress
==
assert
retsub

//Checks the Sender to be the Creator (AlgoPoaP Author)
sub_check_author:
txn Sender
byte "poap_author_address"
app_global_get
==
assert
retsub

// Handles creating a new item AlgoPoaP smart contract
b_creation:
byte "poap_author_address"
txn Note
app_global_put
byte "algopoap_item_create"
b b_log_return

// Handles opting into (onboarding) an item AlgoPoaP smart contract
b_optin:
byte "poap_item_attendee_count"
dup
app_global_get
int 1
+
app_global_put
byte "poap_item_last_attendee"
txn Sender
app_global_put

byte "algopoap_item_optin:"
txn Sender
concat
b b_log_return

// Handles deletion of an item AlgoPoaP smart contract
b_deletion:
callsub sub_check_owner
byte 0x151f7c75
byte "algopoap_item_delete"
concat
global CurrentApplicationID
itob
concat
b b_log_return


// Handles update of an item AlgoPoaP smart contract
b_update:

callsub sub_check_owner
byte 0x151f7c75
byte "algopoap_item_update"
concat
global CurrentApplicationID
itob
concat
b b_log_return


// Handles close out (offboarding) from an item AlgoPoaP smart contract
b_closeout:
byte "algopoap_item_closeout"
txn Sender
concat
b b_log_return

// Handles NoOp calls and rejects them all (those with args are already routed)
b_noop:
b b_error


// Handles creation of AlgoPoaP NFT during setup
sub_create_nft:
itxn_begin
int acfg
itxn_field TypeEnum
int 1000
itxn_field ConfigAssetTotal
int 0
itxn_field ConfigAssetDecimals
byte "PoaP"
itxn_field ConfigAssetUnitName
byte "AlgoPoaP"
itxn_field ConfigAssetName
byte "https://algopoap.xyz/"
itxn_field ConfigAssetURL
global CurrentApplicationAddress
dup
itxn_field ConfigAssetManager
itxn_field ConfigAssetReserve
byte "poap_author_address"
app_global_get
dup
itxn_field ConfigAssetFreeze
itxn_field ConfigAssetClawback
itxn_submit
byte "poap_asa_id"
itxn CreatedAssetID
dup
store 0
app_global_put
retsub 

// Handles config of AlgoPoaP NFT during setup
b_config_nft:
dup
itob
store 0
itxn_begin
itxn_field ConfigAsset
int acfg
itxn_field TypeEnum
txn Sender
itxn_field ConfigAssetFreeze
txn Sender
itxn_field ConfigAssetClawback
global CurrentApplicationAddress
dup
itxn_field ConfigAssetManager
itxn_field ConfigAssetReserve

itxn_submit
byte 0x151f7c75
load 0
concat
b b_log_return

//handles sending NFT using proper values from scratch store
sub_send_nft:
itxn_begin
int axfer
itxn_field TypeEnum
load 1
itxn_field XferAsset
load 2
itxn_field AssetSender
load 3
itxn_field AssetAmount
load 4
itxn_field AssetReceiver
itxn_submit
retsub

// Handles the timestamp from args is bigger than timestamp of AlgoPoaP activation
sub_check_timestamp:
load 9
byte "poap_activate_time"
app_global_get
>=
assert
retsub

// Handles the geo parameters from args is bigger than timestamp of AlgoPoaP activation
sub_check_geo:

byte "poap_lat_1"
app_global_get
load 5
==
byte "poap_lng_1"
app_global_get
load 7
==
&&
assert

//TODO the geo checking is very naive and not  correctly implemented here,
// but since this is for MVP version, this suffices!
byte "poap_lat_2"
app_global_get
load 6
-
int 1000
<
byte "poap_lng_2"
app_global_get
load 8
-
int 1000
<
&&
assert
retsub

// Handles checking the signature for release to exist
sub_check_release:
byte "poap_is_released"
app_global_get
byte "true"
==
assert
retsub

// Handles checking the QR secret from args
sub_check_qr_secret:
load 9
byte "poap_qr_secret"
app_global_get
==
assert
retsub

// Handles Release signature constraint check
b_has_sig:
callsub sub_check_release
byte "poap_has_geo"
app_global_get
byte "true"
==
bnz b_has_geo

byte "poap_has_qr"
app_global_get
byte "true"
==
bnz b_has_qr
b b_finalize_claim

// Handles Geo constraint check
b_has_geo:
callsub sub_check_geo
byte "poap_has_qr"
app_global_get
byte "true"
==
bnz b_has_qr
b b_finalize_claim

// Handles QR Secret constraint check
b_has_qr:
callsub sub_check_qr_secret
b b_finalize_claim

// Handles updating states, logging , sending PoaP and returning the value to method call of method_claim
b_finalize_claim:
byte "poap_asa_id"
app_global_get
store 1
txn Sender
dup
store 2
store 3
int 1
store 4
callsub sub_send_nft

byte "poap_item_claim_count"
dup
app_global_get
int 1
+
app_global_put

byte 0x151f7c75
byte "algopoap:item:claimed:"
concat
txn Sender
concat
b b_log_return

// Handles activate method
method_activate:
callsub sub_check_author

byte "poap_is_activated"
byte "true"
app_global_put
byte "poap_activate_time"
global LatestTimestamp
app_global_put

byte "poap_asa_id"
app_global_get
store 1
txn Sender
dup
store 2
store 3
int 1
store 4
callsub sub_send_nft
byte 0x151f7c75
byte "algopoap:item:activate:"
concat
global CurrentApplicationID
itob
concat
b b_log_return

// Handles release method
method_release:
byte 0x151f7c75
byte "algopoap:item:released:"
concat
global CurrentApplicationID
itob
concat
b b_log_return

// Handles claim method
method_claim:
//uint16 lat_1
txn ApplicationArgs 1
store 5
//uint48 lat_2
txn ApplicationArgs 2
store 6
//uint24 lng_1
txn ApplicationArgs 3
store 7
//uint48 lng_2
txn ApplicationArgs 4
store 8
//uint64 timestamp
txn ApplicationArgs 5
store 9
//string QR secret
txn ApplicationArgs 6
store 10


callsub sub_check_timestamp

byte "poap_has_sig"
app_global_get
byte "true"
==
bnz b_has_sig

byte "poap_has_geo"
app_global_get
byte "true"
==
bnz b_has_geo

byte "poap_has_qr"
app_global_get
byte "true"
==
bnz b_has_qr
b b_finalize_claim




// Handles ABI method call for getting a single total metric of AlgoPoaP item
method_get_metric:
byte 0x151f7c75
byte "single metric"
concat
b b_log_return

// Handles ABI method call for getting all total metrics of AlgoPoaP item
method_get_metrics:
byte 0x151f7c75
byte "All metrics"
concat
b b_log_return

// Handles setting up global states and creation of AlgoPoaP NFT
method_setup:
callsub sub_check_author 
// Global states metrics setup
byte "poap_item_onboard_count"
int 0
app_global_put

byte "poap_item_txn_count"
int 0
app_global_put

byte "poap_item_apply_count"
int 0
app_global_put

byte "poap_item_issuance_count"
int 0
app_global_put

byte "poap_item_nft_issuance_count"
int 0
app_global_put

byte "poap_item_txn_issuance_count"
int 0
app_global_put

byte "poap_item_geo_check_count"
int 0
app_global_put

byte "poap_item_qr_check_count"
int 0
app_global_put

byte "poap_item_sig_check_count"
int 0
app_global_put

byte "poap_item_attendee_count"
int 0
app_global_put

byte "poap_item_last_attendee"
byte ""
app_global_put

byte "poap_item_last_apply"
byte ""
app_global_put

byte "poap_item_last_issuance"
byte ""
app_global_put

byte "poap_item_last_nft_issuance"
byte ""
app_global_put

byte "poap_item_last_txn_issuance"
byte ""
app_global_put

// Args to Global states PoaP data
// setup(pay,account,application,uint16,uint48,uint24,uint48,uint24,uint64,uint64,string,string,string,string,string,string,string,string,bool,bool,bool,bool)byte[]



byte "poap_name"
txn ApplicationArgs 1
app_global_put

byte "poap_logo"
txn ApplicationArgs 2
app_global_put

byte "poap_desc"
txn ApplicationArgs 3
app_global_put

byte "poap_timezone"
txn ApplicationArgs 4
app_global_put

byte "poap_address"
txn ApplicationArgs 5
app_global_put

byte "poap_url"
txn ApplicationArgs 6
app_global_put

byte "poap_email"
txn ApplicationArgs 7
app_global_put

byte "poap_company_name"
txn ApplicationArgs 8
app_global_put

byte "poap_company_logo"
txn ApplicationArgs 9
app_global_put


byte "poap_start_timestamp"
txn ApplicationArgs 10
app_global_put

byte "poap_end_timestamp"
txn ApplicationArgs 11
app_global_put

byte "poap_lat"
txn ApplicationArgs 12
app_global_put

byte "poap_lng"
txn ApplicationArgs 13
app_global_put


byte "poap_geo_buffer"
txn ApplicationArgs 14
app_global_put


txn ApplicationArgs 15
store 12

// Implement many args on index 15 with extraction opcodes
byte "poap_has_nft"
load 12
int 0
extract_uint64
app_global_put

byte "poap_has_geo"
load 12
int 8
extract_uint64
app_global_put

byte "poap_has_sig"
load 12
int 16
extract_uint64
app_global_put

byte "poap_has_qrcode"
load 12
int 24
extract_uint64
app_global_put


// ASA Existence check to route to creation or config branches and subs
int 0
byte "poap_asa_id"
app_global_get_ex
bnz b_config_nft
callsub sub_create_nft
byte 0x151f7c75
load 0
itob
concat
b b_log_return

// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
b_log_return:
log
int 1
return

// Handles rejection with error
b_error:
err

b_error1:
int 1
err

b_error2:
int 2
err









