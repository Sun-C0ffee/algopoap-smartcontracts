#pragma version 6
//   _______ __               ______               ______ 
//  |   _   |  |.-----.-----.|   __ \.-----.---.-.|   __ \
//  |       |  ||  _  |  _  ||    __/|  _  |  _  ||    __/
//  |___|___|__||___  |_____||___|   |_____|___._||___|   
//              |_____|                                   
// algopoap.algo
// Website: https://algopoap.com
// dApp: https://algopoap.xyz
// Authors: @emg110.algo, @sheghzo.algo
// Github: https://github.com/algopoap

// AlgoPoaP Item Smart Contract

// Scratch space schema
// 0: Poa P ASA ID (if hasNFT is true)
// 1: Parent application ID
// 2: ASA Sender address to use with NFT sender sub
// 3: ASA Amount to use with NFT sender sub
// 4: ASA Receiver address to use with NFT sender sub
// 5: 
// 6: 
// 7: timestamp
// 8: The QR secret
// 9: Author Address
// 12: Arg 15 for extraction
// 13: latitude
// 14: latitude_dec
// 15: longitude
// 16: longitude_dec
// 17: poap_activate_time
// 18: poap_lng_unit_diff
// 19: lng_diff
// 20: lat_diff
// 21: poap_geo_buffer
// 22: poap_lat_unit_diff
// 23: fee_to_refund

// Local state schema for algopoap author
//TODO local states...

// Local state schema for algopoap attendee
//TODO local states...

// Global state schema
// Uint64 poap_parent_id
// Byte poap_parent_address
// Byte poap_author_address
// Uint64 poap_asa_id


// Uint64 poap_setup_time
// Uint64 poap_activate_time
// Uint64 poap_release_time

// Byte poap_is_activated
// Byte poap_is_setup
// Byte poap_is_released

// Uint64 poap_item_claim_count
// Uint64 poap_item_nft_issuance_count
// Uint64 poap_item_txn_issuance_count

// Byte poap_item_last_attendee
// Byte poap_item_last_claim
// Byte poap_item_last_nft_issuance
// Byte poap_item_last_txn_issuance

// Byte poap_name
// Byte poap_logo
// Byte poap_desc
// Byte poap_timezone
// Byte poap_address
// Byte poap_url
// Byte poap_email
// Uint64 poap_start_timestamp
// Uint64 poap_lat
// Uint64 poap_lat_dec
// Uint64 poap_lng
// Uint64 poap_lng_dec
// Uint64 poap_geo_buffer
// Uint64 poap_attendee_qty
// Uint64 poap_has_nft
// Uint64 poap_has_geo
// Uint64 poap_has_sig
// Uint64 poap_has_qrcode
// Uint64 poap_lng_unit_diff
// Uint64 author_pays_fee

// Byte poap_switches
// Byte poap_qr_secret

//////////////////////////////////////////////////////////////

// Starts immidiately by a root main branch
b b_main

// Main router branch which checks the call and routes to designated branch
b_main:

txn RekeyTo
global ZeroAddress
==
assert
txn CloseRemainderTo
global ZeroAddress
==
assert
txn AssetCloseTo
global ZeroAddress
==
assert
txn TypeEnum
int appl
==
assert

txn Fee
global MinTxnFee
<=
assert

txn NumAppArgs
int 0
==
bz b_method_check

// Checking Application ID to be zero (app in creation)
txn ApplicationID
bz b_creation

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
bnz b_deletion

// Checking onCompletion type for update application call
txn OnCompletion
int UpdateApplication
==
bnz b_update

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
bnz b_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz b_optin

// Checking onCompletion type for noop application call
txn OnCompletion
int NoOp
==
bnz b_error

// If non of method checks matched then error and reject (to have no arg , noop calls diverted to error most seems to be a good practice to dedicate noop calls to method calls)
b b_error


b_method_check:

// Checking application call's Arg 0 for setup method signature
method "setup(pay,account,application,string,string,string,string,string,string,string,string,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))string"
txn ApplicationArgs 0
==
bnz method_setup

// Checking application call's Arg 0 for re_setup method signature
method "re_setup(pay,account,application,asset,string,string,string,string,string,string,string,(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64))string"
txn ApplicationArgs 0
==
bnz method_setup

// Checking application call's Arg 0 for activate method signature
method "activate(pay,axfer,application,asset)string"
txn ApplicationArgs 0
==
bnz method_activate

// Checking application call's Arg 0 for release method signature
method "release(application)string"
txn ApplicationArgs 0
==
bnz method_release

// Checking application call's Arg 0 for claim method signature
method "claim(pay,asset,application,account,string,(uint64,uint64,uint64,uint64,uint64))string"
txn ApplicationArgs 0
==
bnz method_claim

// Checking application call's Arg 0 for get_metric method signature
method "get_metric(string)string"
txn ApplicationArgs 0
==
bnz method_get_metric

// Checking application call's Arg 0 for get_metrics method signature
method "get_metrics()string[]"
txn ApplicationArgs 0
==
bnz method_get_metrics

// If non of method checks matched then error and reject
b b_error

//Checks the Sender to be the Creator (AlgoPoaP Author)
sub_check_owner:
txn Sender
global CreatorAddress
==
assert
retsub

//Checks the Sender to be the Creator (AlgoPoaP Author)
sub_check_author:
txn Sender
byte "poap_author_address"
app_global_get
==
assert
retsub

// Handles creating a new item AlgoPoaP smart contract
b_creation:
byte "poap_author_address"
txn Note
app_global_put
byte "algopoap_item_create"
b b_log_return

// Handles opting into (onboarding) an item AlgoPoaP smart contract
b_optin:
byte "poap_item_attendee_count"
dup
app_global_get
int 1
+
app_global_put
byte "poap_item_last_attendee"
txn Sender
app_global_put

byte "poap_item_onboard_count"
dup
app_global_get
int 1
+
app_global_put

byte "algopoap_item_optin"
txn Sender
concat
b b_log_return

// Handles deletion of an item AlgoPoaP smart contract
b_deletion:
callsub sub_check_owner
byte 0x151f7c75
byte "algopoap_item_delete"
concat
global CurrentApplicationID
itob
concat
b b_log_return

// Handles update of an item AlgoPoaP smart contract
b_update:
callsub sub_check_owner
byte 0x151f7c75
byte "algopoap_item_update"
concat
global CurrentApplicationID
itob
concat
b b_log_return


// Handles close out (offboarding) from an item AlgoPoaP smart contract
b_closeout:
byte "algopoap_item_closeout"
txn Sender
concat
b b_log_return

// Handles NoOp calls and rejects them all (those with args are already routed)
b_noop:
b b_error

// Handles creation of AlgoPoaP NFT during setup
sub_create_nft:
itxn_begin
int acfg
itxn_field TypeEnum
byte "poap_attendee_qty"
app_global_get
int 10
+
itxn_field ConfigAssetTotal
int 0
itxn_field ConfigAssetDecimals
byte "PoaP"
itxn_field ConfigAssetUnitName
byte "AlgoPoaP"
itxn_field ConfigAssetName
byte "poap_url"
app_global_get
itxn_field ConfigAssetURL
global CurrentApplicationAddress
dup
itxn_field ConfigAssetManager
itxn_field ConfigAssetReserve
byte "poap_author_address"
app_global_get
dup
itxn_field ConfigAssetFreeze
itxn_field ConfigAssetClawback
itxn_submit
byte "poap_asa_id"
itxn CreatedAssetID
dup
store 0
app_global_put
retsub 

// Handles config of AlgoPoaP NFT during setup
b_config_nft:
dup
itob
store 0
itxn_begin
itxn_field ConfigAsset
int acfg
itxn_field TypeEnum


global CurrentApplicationAddress
dup
dup2
itxn_field ConfigAssetManager
itxn_field ConfigAssetReserve
itxn_field ConfigAssetFreeze
itxn_field ConfigAssetClawback
itxn_submit
byte 0x151f7c75
load 0
concat
b b_log_return

//handles sending NFT using proper values from scratch store
sub_send_nft:
itxn_begin
int axfer
itxn_field TypeEnum
load 0
itxn_field XferAsset
load 2
itxn_field AssetSender
load 3
itxn_field AssetAmount
load 4
itxn_field AssetReceiver
itxn_submit
byte "poap_item_nft_issuance_count"
dup
app_global_get
int 1
+
app_global_put
retsub

// Handles the timestamp from args is bigger than timestamp of AlgoPoaP activation
sub_check_timestamp:
global LatestTimestamp
byte "poap_activate_time"
app_global_get
dup
store 17
>=
assert
load 7
load 17
>=
assert

retsub

// Handles the geo parameters from args is bigger than timestamp of AlgoPoaP activation
//TODO correct the geo handling and checking
sub_check_geo:
byte "poap_lat"
app_global_get
load 13
==
byte "poap_lng"
app_global_get
load 15
==
&&
assert

//unit differ
byte "poap_lng_unit_diff"
app_global_get
store 18

//lat diff
byte "poap_lat_dec"
app_global_get
load 14
-
store 19

//lng diff
byte "poap_lng_dec"
app_global_get
load 16
-
store 20

//geo buffer
byte "poap_geo_buffer"
app_global_get
store 21

//poap_lat_unit_diff
int 11
store 22

//lat diff by power of 2
load 19
load 22
*
int 2
exp
store 23
//lng diff by power of 2
load 20
load 18
*
int 2
exp
store 24
//geo buffer by power of 2
load 21
int 2
exp
store 25

//Check lat not to be out of bounds
load 21
load 19
load 22
*
>
assert

//Check lng not to be out of bounds
load 21
load 20
load 18
*
>
assert

//check pythagorean triple for triangle of lat, lng and geo buffer
load 23
load 24
+
load 25
<=
assert

retsub

// Handles checking the signature for release to exist
sub_check_release:
byte "poap_is_released"
app_global_get
byte "true"
==
assert
retsub

// Handles checking the QR secret from args
sub_check_qr_secret:
load 8
byte "poap_qr_secret"
app_global_get
==
assert
retsub

// Handles Release signature constraint check
b_has_sig:
callsub sub_check_release
byte "poap_has_geo"
app_global_get
int 1
==
bnz b_has_geo

byte "poap_has_qrcode"
app_global_get
int 1
==
bnz b_has_qr
b b_finalize_claim

// Handles Geo constraint check
b_has_geo:
callsub sub_check_geo
byte "poap_has_qrcode"
app_global_get
int 1
==
bnz b_has_qr
b b_finalize_claim

// Handles QR Secret constraint check
b_has_qr:
callsub sub_check_qr_secret
b b_finalize_claim

// Handles updating states, logging , sending PoaP and returning the value to method call of method_claim
b_finalize_claim:
byte "poap_asa_id"
app_global_get
store 0
txn Sender
store 2
int 1
store 3
byte "poap_author_address"
app_global_get
store 4

callsub sub_send_nft

byte "poap_item_claim_count"
dup
app_global_get
int 1
+
app_global_put

byte 0x151f7c75
byte "algopoap_item_claimed"
concat
b b_log_return

// If author pays the activation fees for all participants
b_activate_author_pays:
byte "poap_attendee_qty"
app_global_get
int 3
*
global MinTxnFee
*
gtxn 0 Amount
>=
assert
b b_activate_finalize

// If attendees pay for their own claims
b_activate_default:
gtxn 0 Amount
int 0
==
assert
b b_activate_finalize

// Finalizing the activation
b_activate_finalize:
byte "poap_is_activated"
byte "true"
app_global_put
byte "poap_activate_time"
global LatestTimestamp
app_global_put

byte "poap_asa_id"
app_global_get
store 0
global CurrentApplicationAddress
store 2
int 1
store 3
byte "poap_author_address"
app_global_get
store 4

callsub sub_send_nft
byte 0x151f7c75
byte "algopoap_item_activate"
concat
b b_log_return


// Handles activate method
method_activate:
callsub sub_check_author

global GroupSize
int 3
==
assert

gtxn 0 RekeyTo
global ZeroAddress
==
assert
gtxn 0 CloseRemainderTo
global ZeroAddress
==
assert
gtxn 0 AssetCloseTo
global ZeroAddress
==
assert
gtxn 0 TypeEnum
int pay
==
assert

gtxn 0 Fee
global MinTxnFee
int 2
*
<=
assert

byte "author_pays_fee"
app_global_get
int 1
==
bnz b_activate_author_pays
b b_activate_default



// Handles release method
method_release:
callsub sub_check_author
byte "poap_is_released"
byte "true"
app_global_put
byte 0x151f7c75
byte "algopoap_item_released"
concat
b b_log_return

b_claim_author_pays:
gtxn 0 Amount
int 0
==
assert
gtxn 0 Fee
store 23
b b_claim_check



b_claim_default:
gtxn 0 Fee
global MinTxnFee
int 2
*
<=
assert
b b_claim_check

b_claim_check:
//string secret
txn ApplicationArgs 4
store 8

txn ApplicationArgs 5
store 10

//Uint64 lat
load 10
int 0
extract_uint64
store 13

//Uint64 lat_dec
load 10
int 8
extract_uint64
store 14
//Uint64 lng
load 10
int 16
extract_uint64
store 15
//Uint64 lng_dec
load 10
int 24
extract_uint64
store 16

//Uint64 timestamp
load 10
int 32
extract_uint64
store 7

callsub sub_check_timestamp

byte "poap_has_sig"
app_global_get
int 1
==
bnz b_has_sig

byte "poap_has_geo"
app_global_get
int 1
==
bnz b_has_geo

byte "poap_has_qrcode"
app_global_get
int 1
==
bnz b_has_qr
b b_finalize_claim

// Handles claim method
method_claim:
int 0
global CurrentApplicationID
app_opted_in
assert

global GroupSize
int 2
==
assert

gtxn 0 RekeyTo
global ZeroAddress
==
assert
gtxn 0 CloseRemainderTo
global ZeroAddress
==
assert
gtxn 0 AssetCloseTo
global ZeroAddress
==
assert
gtxn 0 TypeEnum
int pay
==
assert

gtxn 0 Amount
int 0
==
assert

byte "author_pays_fee"
app_global_get
int 1
==
bnz b_claim_author_pays
b b_claim_default




// Handles ABI method call for getting a single total metric of AlgoPoaP item
method_get_metric:
byte 0x151f7c75
byte "single metric"
concat
b b_log_return

// Handles ABI method call for getting all total metrics of AlgoPoaP item
method_get_metrics:
byte 0x151f7c75
byte "All metrics"
concat
b b_log_return

// Handles setting up global states and creation of AlgoPoaP NFT
method_setup:
callsub sub_check_author 
//Checking group size
global GroupSize
int 2
==
assert

// Check first transaction RekeyTo
gtxn 0 RekeyTo
global ZeroAddress
==
assert

// Check first transaction CloseRemainderTo
gtxn 0 CloseRemainderTo
global ZeroAddress
==
assert

// Check first transaction AssetCloseTo
gtxn 0 AssetCloseTo
global ZeroAddress
==
assert

// Check first transaction type to be pay
gtxn 0 TypeEnum
int pay
==
assert

// Check first transaction fee to be minimum 2 times minimal fee
gtxn 0 Fee
global MinTxnFee
<=
assert

// Check first transaction amount to be 2 times minimal fee
gtxn 0 Amount
global MinTxnFee
<=
assert
// Global states metrics setup
byte "poap_item_onboard_count"
int 0
app_global_put

byte "poap_item_txn_count"
int 0
app_global_put

byte "poap_item_nft_issuance_count"
int 0
app_global_put

byte "poap_item_txn_issuance_count"
int 0
app_global_put

byte "poap_item_last_attendee"
byte "-"
app_global_put

byte "poap_item_last_nft_issuance"
byte "-"
app_global_put

byte "poap_item_last_txn_issuance"
byte "-"
app_global_put

// Args to Global states PoaP data

byte "poap_name"
txn ApplicationArgs 4
app_global_put

byte "poap_logo"
txn ApplicationArgs 5
app_global_put

byte "poap_desc"
txn ApplicationArgs 6
app_global_put

byte "poap_timezone"
txn ApplicationArgs 7
app_global_put

byte "poap_address"
txn ApplicationArgs 8
app_global_put

byte "poap_url"
txn ApplicationArgs 9
app_global_put

byte "poap_email"
txn ApplicationArgs 10
app_global_put

txn ApplicationArgs 11
store 10

byte "poap_start_timestamp"
load 10
int 0
extract_uint64
app_global_put

byte "poap_lat"
load 10
int 8
extract_uint64
app_global_put

byte "poap_lat_dec"
load 10
int 16
extract_uint64
app_global_put

byte "poap_lng"
load 10
int 24
extract_uint64
app_global_put

byte "poap_lng_dec"
load 10
int 32
extract_uint64
app_global_put

byte "poap_geo_buffer"
load 10
int 40
extract_uint64
app_global_put

byte "poap_attendee_qty"
load 10
int 48
extract_uint64
app_global_put

byte "poap_has_nft"
load 10
int 56
extract_uint64
app_global_put

byte "poap_has_geo"
load 10
int 64
extract_uint64
app_global_put

byte "poap_has_sig"
load 10
int 72
extract_uint64
app_global_put

byte "poap_has_qrcode"
load 10
int 80
extract_uint64
app_global_put

byte "poap_lng_unit_diff"
load 10
int 88
extract_uint64
app_global_put

byte "author_pays_fee"
load 10
int 96
extract_uint64
app_global_put

// ASA Existence check to route to creation or config branches and subs
int 0
byte "poap_asa_id"
app_global_get_ex
bnz b_config_nft
callsub sub_create_nft
byte 0x151f7c75
load 0
itob
concat
b b_log_return

// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
b_log_return:
log
byte "poap_item_txn_count"
dup
app_global_get
int 1
+
app_global_put
int 1
return

// Handles rejection with error
b_error:
err









