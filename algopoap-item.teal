#pragma version 6
// AlgoPoaP
// algopoap.algo
// Website: https://algopoap.com
// dApp: https://algopoap.xyz
// Authors: @emg110.algo, @sheghzo.algo
// Github: https://github.com/algopoap

// AlgoPoaP Item Smart Contract
// Scratch space schema
// 0: 

//Starts immidiately by a root main branch
b b_main
//Main ruter branch which checks the call and routes to designated branch
b_main:
txn NumAppArgs
int 0
==
bz b_method_check

// Checking Application ID to be zero (app in creation)
txn ApplicationID
bz b_creation

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
bnz b_deletion

// Checking onCompletion type for update application call
txn OnCompletion
int UpdateApplication
==
bnz b_update

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
bnz b_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz b_optin

// Checking onCompletion type for noop application call
txn OnCompletion
int NoOp
==
bnz b_error

//If non of method checks matched then error and reject (to have no arg , noop calls diverted to error most seems to be a good practice to dedicate noop calls to method calls)
b b_error


b_method_check:

// Checking application call's Arg 0 for activate method signature
method "setup(appl,pay,uint16,uint48,uint24,uint48,uint24,uint64,uint64,string,string,string,string,string,bool,bool,bool,bool)string"
txn ApplicationArgs 0
==
bnz method_activate


// Checking application call's Arg 0 for activate method signature
method "activate(appl,pay,axfer)uint64"
txn ApplicationArgs 0
==
bnz method_activate

// Checking application call's Arg 0 for release method signature
method "release(appl)bool"
txn ApplicationArgs 0
==
bnz method_release

// Checking application call's Arg 0 for claim method signature
method "claim(appl,pay,axfer,account,uint16,uint48,uint24,uint48,uint24,uint64,string)bool"
txn ApplicationArgs 0
==
bnz method_claim

// Checking application call's Arg 0 for get_metric method signature
method "get_metric(string)string"
txn ApplicationArgs 0
==
bnz method_get_metric

// Checking application call's Arg 0 for get_metrics method signature
method "get_metrics()string[]"
txn ApplicationArgs 0
==
bnz method_get_metrics

//If non of method checks matched then error and reject
b b_error


// Handles creating a new main AlgoPoaP smart contract
b_creation:
byte "algopoap:create:"
txn Sender
concat
b b_log_return

// Handles opting into (onboarding) an item AlgoPoaP smart contract
b_optin:
//TODO: Increment counters and update global states
byte "algopoap:optin:"
txn Sender
concat
b b_log_return

// Handles deletion of an item AlgoPoaP smart contract
b_deletion:
txn Sender
global CreatorAddress
==
assert
byte "algopoap:delete:"
global CurrentApplicationID
itob
concat
b b_log_return



// Handles update of an item AlgoPoaP smart contract
b_update:
txn Sender
global CreatorAddress
==
assert
byte "algopoap:update:"
global CurrentApplicationID
itob
concat
b b_log_return


// Handles close out (offboarding) from an item AlgoPoaP smart contract
b_closeout:
byte "algopoap:closeout:"
txn Sender
concat
b b_log_return

//Handles NoOp calls and rejects them all (those with args are already routed)
b_noop:
b b_error


// Handles creation of AlgoPoaP NFT during setup
sub_nft_create:
retsub 

// Handles setting up global states and creation of AlgoPoaP NFT
method_setup:
callsub sub_create_nft
b b_log_return 


// Handles activate method
method_activate:
b b_log_return

// Handles claim method
method_claim:
b b_log_return

// Handles release method
method_release:
b b_log_return

// Handles get_metric method
method_get_metric:
b b_log_return

// Handles get_metrics method
method_get_metrics:
b b_log_return

// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
b_log_return:
log
int 1
return

//Handles rejection with error
b_error:
err











