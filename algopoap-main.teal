#pragma version 6
// AlgoPoaP
// algopoap.algo
// Website: https://algopoap.com
// dApp: https://algopoap.xyz
// Authors: @emg110.algo, @sheghzo.algo
// Github: https://github.com/algopoap


// AlgoPoaP Smart Contract

//Starts immidiately by a root main branch
b b_main
//Main ruter branch which checks the call and routes to designated branch
b_main:
txn NumAppArgs
int 0
==
bz b_method_check

// Checking Application ID to be zero (app in creation)
txn ApplicationID
bz b_creation

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
bnz b_deletion

// Checking onCompletion type for update application call
txn OnCompletion
int UpdateApplication
==
bnz b_update

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
bnz b_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz b_optin

// Checking onCompletion type for noop application call
txn OnCompletion
int NoOp
==
bnz b_noop

b b_error

// Method signature checks
b_method_check:
// Checking application call's Arg 0 for setup method signature
method "setup(string)string"
txn ApplicationArgs 0
==
bnz method_setup

// Checking application call's Arg 0 for c2c_create method signature
method "c2c_create(pay,byte[],byte[])uint64"
txn ApplicationArgs 0
==
bnz method_c2c_create

// Checking application call's Arg 0 for c2c_update method signature
method "c2c_update(application,byte[],byte[])bool"
txn ApplicationArgs 0
==
bnz method_c2c_update

// Checking application call's Arg 0 for c2c_delete method signature 
method "c2c_delete(application)bool"
txn ApplicationArgs 0
==
bnz method_c2c_delete

// Checking application call's Arg 0 for get_metric method signature 
method "get_metric(application)string"
txn ApplicationArgs 0
==
bnz method_get_metric

// Checking application call's Arg 0 for get_metrics method signature 
method "get_metrics(application)string[]"
txn ApplicationArgs 0
==
bnz method_get_metrics

//If non of checks matched then error and reject
b b_error


// Handles creating a new main AlgoPoaP smart contract
b_creation:
byte "algopoap:create:"
txn Sender
concat
b b_log_return

// Handles opting into (onboarding) a main AlgoPoaP smart contract
b_optin:
//TODO: Increment counters and update global states
byte "algopoap:optin:"
txn Sender
concat
b b_log_return

// Handles deletion of a main AlgoPoaP smart contract
b_deletion:
txn Sender
global CreatorAddress
==
assert
byte "algopoap:delete:"
global CurrentApplicationID
itob
concat
b b_log_return



// Handles update of a main AlgoPoaP smart contract
b_update:
txn Sender
global CreatorAddress
==
assert
byte "algopoap:update:"
global CurrentApplicationID
itob
concat
b b_log_return


// Handles close out (offboarding) from a main AlgoPoaP smart contract
b_closeout:
byte "algopoap:closeout:"
txn Sender
concat
b b_log_return

//Handles NoOp calls and rejects them all (those with args are already routed)
b_noop:
b b_error

//Handles ABI method call for setup of an AlgoPoaP item
method_setup:
txn Sender
global CreatorAddress
==
assert
//TODO: global states setup here...
txn ApplicationArgs 1
b b_log_return

//Handles ABI method call for contract to contract creation of an AlgoPoaP item
method_c2c_create:
b b_log_return

//Handles ABI method call for contract to contract update of an AlgoPoaP item
method_c2c_update:
b b_log_return

//Handles ABI method call for contract to contract deletion of an AlgoPoaP item
method_c2c_delete:
b b_log_return

//Handles ABI method call for getting a single total metric of AlgoPoaP
method_get_metric:
b b_log_return

//Handles ABI method call for getting all total metrics of AlgoPoaP
method_get_metrics:
b b_log_return

// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
b_log_return:
log
int 1
return

//Handles rejection with error
b_error:
err

