#pragma version 6
//   _______ __               ______               ______ 
//  |   _   |  |.-----.-----.|   __ \.-----.---.-.|   __ \
//  |       |  ||  _  |  _  ||    __/|  _  |  _  ||    __/
//  |___|___|__||___  |_____||___|   |_____|___._||___|   
//              |_____|                                   
// algopoap.algo
// Website: https://algopoap.com
// dApp: https://algopoap.xyz
// Authors: @emg110.algo, @sheghzo.algo
// Github: https://github.com/algopoap

// AlgoPoaP Smart Contract

// Scratch space schema
// 1: Application ID

// Local state schema for algopoap author
//TODO local states...

// Local state schema for algopoap attendee
//TODO local states...

// Global state schema
// Uint64 poap_onboard_count
// Uint64 poap_count
// Uint64 poap_txn_count
// Uint64 poap_claim_count
// Uint64 poap_issuance_count
// Uint64 poap_nft_issuance_count
// Uint64 poap_txn_issuance_count
// Uint64 poap_geo_check_count
// Uint64 poap_qr_check_count
// Uint64 poap_sig_check_count
// Uint64 poap_author_count
// Uint64 poap_attendee_count
// Byte poap_last_appid
// Byte poap_last_author
// Byte poap_last_attendee

//////////////////////////////////////////////////////////////

// Starts immidiately by a root main branch
b b_main
// Main ruter branch which checks the call and routes to designated branch
b_main:

// Checks the number of application args , if 0 then no method it is
txn NumAppArgs
int 0
==
bz b_method_check

// Checking Application ID to be zero (app in creation)
txn ApplicationID
bz b_creation

// Checking onCompletion type for delete application call
txn OnCompletion
int DeleteApplication
==
bnz b_deletion

// Checking onCompletion type for update application call
txn OnCompletion
int UpdateApplication
==
bnz b_update

// Checking onCompletion type for close out application call
txn OnCompletion
int CloseOut
==
bnz b_closeout

// Checking onCompletion type for optin application call
txn OnCompletion
int OptIn
==
bnz b_optin

// Checking onCompletion type for noop application call
txn OnCompletion
int NoOp
==
bnz b_noop

// End of main which goes to rejection going forward
b b_error

// Method signature checks
b_method_check:
// Checking application call's Arg 0 for setup method signature
method "setup(string)string"
txn ApplicationArgs 0
==
bnz method_setup

// Checking application call's Arg 0 for item_create method signature
method "item_create(pay,byte[],byte[])uint64"
txn ApplicationArgs 0
==
bnz method_item_create

// Checking application call's Arg 0 for item_update method signature
method "item_update(application,byte[],byte[])uint64"
txn ApplicationArgs 0
==
bnz method_item_update

// Checking application call's Arg 0 for item_delete method signature 
method "item_delete(application)uint64"
txn ApplicationArgs 0
==
bnz method_item_delete

// Checking application call's Arg 0 for get_metric method signature 
method "get_metric(string)string"
txn ApplicationArgs 0
==
bnz method_get_metric

// Checking application call's Arg 0 for get_metrics method signature 
method "get_metrics()string"
txn ApplicationArgs 0
==
bnz method_get_metrics

// If non of checks matched then error and reject
b b_error

// Checks the Sender to be the Creator (AlgoPoaP Author)
sub_check_author:
txn Sender
global CreatorAddress
==
assert
retsub

// Handles creating a new main AlgoPoaP smart contract
b_creation:
byte "algopoap:create:"
txn Sender
concat
b b_log_return

// Handles opting into (onboarding) a main AlgoPoaP smart contract
b_optin:
//TODO: Increment counters and update global states
byte "algopoap:optin:"
txn Sender
concat
b b_log_return

// Handles deletion of a main AlgoPoaP smart contract
b_deletion:
callsub sub_check_author
byte "algopoap:delete:"
global CurrentApplicationID
itob
concat
b b_log_return

// Handles update of a main AlgoPoaP smart contract
b_update:
callsub sub_check_author
byte "algopoap:update:"
global CurrentApplicationID
itob
concat
b b_log_return

// Handles close out (offboarding) from a main AlgoPoaP smart contract
b_closeout:
byte "algopoap:closeout:"
txn Sender
concat
b b_log_return

// Handles NoOp calls and rejects them all (those with args are already routed)
b_noop:
b b_error

// Handles ABI method call for setup of an AlgoPoaP item
method_setup:
txn Sender
global CreatorAddress
==
assert

byte "poap_onboard_count"
int 0
app_global_put

byte "poap_count"
int 0
app_global_put

byte "poap_txn_count"
int 0
app_global_put

byte "poap_claim_count"
int 0
app_global_put

byte "poap_issuance_count"
int 0
app_global_put

byte "poap_nft_issuance_count"
int 0
app_global_put

byte "poap_geo_check_count"
int 0
app_global_put

byte "poap_qr_check_count"
int 0
app_global_put

byte "poap_sig_check_count"
int 0
app_global_put

byte "poap_author_count"
int 0
app_global_put

byte "poap_attendee_count"
int 0
app_global_put

byte "poap_last_appid"
int 0
app_global_put

byte "poap_last_author"
byte ""
app_global_put

byte "poap_last_attendee"
byte ""
app_global_put
byte 0x151f7c75
txn ApplicationArgs 1
concat
b b_log_return

// Handles ABI method call for contract to contract creation of an AlgoPoaP item
method_item_create:
// Checking the payment transaction with min required fees sum as amount
txn GroupIndex
int 1
-
dup
gtxns Receiver
global CurrentApplicationAddress
==
assert
gtxns Amount
int 100000
>=
assert
// Inner transaction to create the new AlgoPoaP item smart contract

itxn_begin

int appl
itxn_field TypeEnum

int NoOp
itxn_field OnCompletion

// Get the length and extract it, removing the first 2 bytes.
txn ApplicationArgs 1
dup
len
int 2
swap
substring3
itxn_field ApprovalProgram

// Get the length and extract it, removing the first 2 bytes.
txn ApplicationArgs 2
dup
len
int 2
swap
substring3
itxn_field ClearStateProgram
int 20
itxn_field GlobalNumByteSlice
int 20
itxn_field GlobalNumUint
int 8
itxn_field LocalNumUint
int 8
itxn_field LocalNumByteSlice
int 1000
itxn_field Fee

itxn_submit
itxn CreatedApplicationID
itob
byte 0x151f7c75
swap
concat
b b_log_return

//Handles ABI method call for contract to contract update of an AlgoPoaP item
method_item_update:

// Inner transaction to update the AlgoPoaP item smart contract
itxn_begin

int appl
itxn_field TypeEnum

int UpdateApplication
itxn_field OnCompletion

txn ApplicationArgs 1
btoi
txnas Applications
dup
store 1
itxn_field ApplicationID

txn ApplicationArgs 2
dup
len
int 2
swap
substring3
itxn_field ApprovalProgram

txn ApplicationArgs 3
dup
len
int 2
swap
substring3
itxn_field ClearStateProgram

int 1000
itxn_field Fee

itxn_submit

byte 0x151f7c75
load 1
itob
concat
b b_log_return

// Handles ABI method call for contract to contract deletion of an AlgoPoaP item
method_item_delete:

// Inner transaction to delete the AlgoPoaP item smart contract
itxn_begin

int appl
itxn_field TypeEnum

int DeleteApplication
itxn_field OnCompletion

txn ApplicationArgs 1
btoi
txnas Applications
itxn_field ApplicationID

int 1000
itxn_field Fee

itxn_submit
itxn_begin

int pay
itxn_field TypeEnum

txn Sender
itxn_field Receiver

int 100000
itxn_field Amount

int 1000
itxn_field Fee

itxn_submit

byte 0x151f7c75
b b_log_return

// Handles ABI method call for getting a single total metric of AlgoPoaP
method_get_metric:
byte 0x151f7c75
byte "single_metric"
concat
b b_log_return

// Handles ABI method call for getting all total metrics of AlgoPoaP
method_get_metrics:
byte 0x151f7c75
byte "all_metrics"
concat
b b_log_return

// Handles logging the last element on the stack then put a 1 on the top and return (log and approve)
b_log_return:
log
int 1
return

// Handles rejection with error
b_error:
err

